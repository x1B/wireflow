define(['exports', 'module', '../history-store', '../../actions/history', '../../testing/dispatcher-mock'], function (exports, module, _historyStore, _actionsHistory, _testingDispatcherMock) {
  'use strict';

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _HistoryStore = _interopRequireDefault(_historyStore);

  var _DispatcherMock = _interopRequireDefault(_testingDispatcherMock);

  // Jasmine:
  var jasmine = window.jasmine;
  var describe = window.describe;
  var beforeEach = window.beforeEach;
  var expect = window.expect;
  var it = window.it;
  var any = jasmine.any;

  describe('A history store', function () {

    var dispatcher;
    var store;

    beforeEach(function () {
      dispatcher = new _DispatcherMock['default']();
      store = new _HistoryStore['default'](dispatcher);
    });

    it('handles history actions', function () {
      expect(dispatcher.register).toHaveBeenCalledWith(_actionsHistory.SaveState, any(Function));
      expect(dispatcher.register).toHaveBeenCalledWith(_actionsHistory.CreateCheckpoint, any(Function));
      expect(dispatcher.register).toHaveBeenCalledWith(_actionsHistory.UiUndo, any(Function));
      expect(dispatcher.register).toHaveBeenCalledWith(_actionsHistory.UiRedo, any(Function));
    });

    it('begins with an empty log', function () {
      expect(store.checkpoints.toJS()).toEqual([]);
      expect(store.now).toEqual(0);
      expect(store.storeLogs.toJS()).toEqual({});
    });

    describe('asked to create a checkpoint,', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _actionsHistory.CreateCheckpoint)({ before: 'set.to.A1' }));
      });

      it('inserts a checkpoint', function () {
        expect(store.checkpoints.toJS()).toEqual([{ at: 1, before: 'set.to.A1' }]);
        expect(store.now).toEqual(2);
        expect(store.storeLogs.toJS()).toEqual({});
      });

      describe('then asked to save state,', function () {

        beforeEach(function () {
          dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'A', state: 'A1' }));
        });

        it('saves state to the log', function () {
          expect(store.storeLogs.toJS()).toEqual({
            A: [{ at: 2, state: 'A1' }]
          });
        });
      });
    });

    describe('asked to save state,', function () {

      beforeEach(function () {
        dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'A', state: 'A1' }));
        dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'B', state: 'B1' }));
      });

      it('saves state to the log', function () {
        expect(store.storeLogs.toJS()).toEqual({
          A: [{ at: 0, state: 'A1' }],
          B: [{ at: 0, state: 'B1' }]
        });
      });

      describe('then to create a checkpoint,', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _actionsHistory.CreateCheckpoint)({ before: 'set.to.A2' }));
        });

        it('inserts a checkpoint', function () {
          expect(store.checkpoints.toJS()).toEqual([{ at: 1, before: 'set.to.A2' }]);
          expect(store.now).toEqual(2);
        });

        it('keeps store log contents', function () {
          expect(store.storeLogs.toJS()).toEqual({
            A: [{ at: 0, state: 'A1' }],
            B: [{ at: 0, state: 'B1' }]
          });
        });

        describe('and then to save more state,', function () {
          beforeEach(function () {
            dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'A', state: 'A2' }));
            dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'B', state: 'B1' }));
          });

          it('appends new state to the store log', function () {
            expect(store.storeLogs.get('A').toJS()).toEqual([{ at: 0, state: 'A1' }, { at: 2, state: 'A2' }]);
          });

          it('does not touch the store log where contents remain the same', function () {
            expect(store.storeLogs.get('B').toJS()).toEqual([{ at: 0, state: 'B1' }]);
          });

          describe('then to undo,', function () {

            beforeEach(function () {
              dispatcher.dispatch.calls.reset();
              dispatcher.handleAction((0, _actionsHistory.UiUndo)());
            });

            it('restores the previous state from the store log', function () {
              expect(dispatcher.dispatch).toHaveBeenCalledWith((0, _actionsHistory.RestoreState)({ storeId: 'A', state: 'A1' }));
            });

            it('does not restore state if untouched since checkpoint', function () {
              expect(dispatcher.dispatch).not.toHaveBeenCalledWith((0, _actionsHistory.RestoreState)({ storeId: 'B', state: 'B1' }));
            });

            it('does not remove store log entries', function () {
              expect(store.storeLogs.toJS()).toEqual({
                A: [{ at: 0, state: 'A1' }, { at: 2, state: 'A2' }],
                B: [{ at: 0, state: 'B1' }]
              });
            });

            describe('and then to redo,', function () {
              beforeEach(function () {
                dispatcher.dispatch.calls.reset();
                dispatcher.handleAction((0, _actionsHistory.UiRedo)());
              });

              it('restores the more recent state from the store log', function () {
                var restore = dispatcher.dispatch.calls.mostRecent().args[0];
                expect(restore.toJS()).toEqual({ storeId: 'A', state: 'A2', type: (0, _actionsHistory.RestoreState)().type });
              });

              it('does not remove store log entries', function () {
                expect(store.storeLogs.toJS()).toEqual({
                  A: [{ at: 0, state: 'A1' }, { at: 2, state: 'A2' }],
                  B: [{ at: 0, state: 'B1' }]
                });
              });
            });

            describe('and then to create a new checkpoint,', function () {
              beforeEach(function () {
                return dispatcher.handleAction((0, _actionsHistory.CreateCheckpoint)({ before: 'set.to.A2x' }));
              });

              it('discards any rewound states from the store log', function () {
                expect(store.storeLogs.toJS()).toEqual({
                  A: [{ at: 0, state: 'A1' }],
                  B: [{ at: 0, state: 'B1' }]
                });
              });

              it('replaces any rewound checkpoints with the new one', function () {
                expect(store.checkpoints.toJS()).toEqual([{ at: 1, before: 'set.to.A2x' }]);
              });
            });
          });
        });
      });

      describe('then asked to undo without a checkpoint,', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _actionsHistory.UiUndo)());
        });

        it('does nothing', function () {
          expect(store.checkpoints.toJS()).toEqual([]);
          expect(store.now).toEqual(0);
          expect(store.storeLogs.toJS()).toEqual({
            A: [{ at: 0, state: 'A1' }],
            B: [{ at: 0, state: 'B1' }]
          });
        });
      });

      describe('and to save more state before the next checkpoint,', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'A', state: 'A2' }));
          dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'B', state: 'B2' }));
          dispatcher.handleAction((0, _actionsHistory.SaveState)({ storeId: 'B', state: 'B3' }));
        });

        it('replaces the previous state', function () {
          expect(store.storeLogs.toJS()).toEqual({
            A: [{ at: 0, state: 'A2' }],
            B: [{ at: 0, state: 'B3' }]
          });
        });
      });
    });
  });

  module.exports = {};
});
//# sourceMappingURL=data:application/json;base64,