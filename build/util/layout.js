define(['exports', 'module', 'dagre'], function (exports, module, _dagre) {
  'use strict';

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

  var _dagre2 = _interopRequireDefault(_dagre);

  module.exports = { calculateLayout: calculateLayout };

  function calculateLayout(graph, measurements) {

    var owners = {
      inbound: {},
      outbound: {}
    };

    var dg = new _dagre2['default'].graphlib.Graph();
    // dagre.layout().nodeSep( 60 ).rankSep( 90 ).edgeSep( 0 ).rankDir( 'LR' ).run( dagreGraph );
    dg.setGraph({
      rankdir: 'LR',
      nodesep: 60,
      ranksep: 90,
      edgesep: 0,
      marginx: 15,
      marginy: 15
    });
    dg.setDefaultEdgeLabel(function () {
      return {};
    });
    measurements.get('edges').forEach(add('E.'));
    measurements.get('vertices').forEach(add('V.'));
    graph.get('vertices').forEach(collectOwningVertices());
    graph.get('vertices').forEach(connect);

    _dagre2['default'].layout(dg);
    return {
      vertices: decode('V.', dg.nodes()),
      edges: decode('E.', dg.nodes())
    };

    function connect(vertex, vertexId) {
      var dgVertexId = 'V.' + vertexId;
      [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
        var isInbound = groupNo === 0;
        group.forEach(function (_ref) {
          var edgeId = _ref.edgeId;

          if (!edgeId) {
            return;
          }
          var dgNeighborId = 'E.' + edgeId;
          if (!measurements.get('edges').get(edgeId)) {
            // invisible edge, "owned" by a vertex
            dgNeighborId = 'V.' + owners[isInbound ? 'outbound' : 'inbound'][edgeId];
          }

          dg.setEdge(isInbound ? dgNeighborId : dgVertexId, isInbound ? dgVertexId : dgNeighborId);
        });
      });
    }

    function add(prefix) {
      return function (_ref2, nodeId) {
        var _ref2$dimensions = _ref2.dimensions;
        var width = _ref2$dimensions.width;
        var height = _ref2$dimensions.height;

        var dgNodeId = prefix + nodeId;
        dg.setNode(dgNodeId, { label: dgNodeId, width: width, height: height });
      };
    }

    function collectOwningVertices() {
      return function (vertex, vertexId) {
        [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
          var isInbound = groupNo === 0;
          group.forEach(function (_ref3) {
            var edgeId = _ref3.edgeId;

            if (!edgeId) {
              return;
            }
            owners[isInbound ? 'inbound' : 'outbound'][edgeId] = vertexId;
          });
        });
      };
    }

    function decode(prefix, dgNodes) {
      var result = {};
      dgNodes.forEach(function (dgNodeId) {
        var _dg$node = dg.node(dgNodeId);

        var label = _dg$node.label;
        var width = _dg$node.width;
        var height = _dg$node.height;
        var x = _dg$node.x;
        var y = _dg$node.y;

        if (label.indexOf(prefix) === 0) {
          var id = label.substring(prefix.length, label.length);
          result[id] = {
            left: x - width / 2,
            top: y - height / 2
          };
        }
      });
      return result;
    }
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2xheW91dC5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OzttQkFFZSxFQUFFLGVBQWUsRUFBZixlQUFlLEVBQUU7O0FBRWxDLFdBQVMsZUFBZSxDQUFFLEtBQUssRUFBRSxZQUFZLEVBQUc7O0FBRTlDLFFBQU0sTUFBTSxHQUFHO0FBQ2IsYUFBTyxFQUFFLEVBQUU7QUFDWCxjQUFRLEVBQUUsRUFBRTtLQUNiLENBQUM7O0FBRUYsUUFBTSxFQUFFLEdBQUcsSUFBSSxtQkFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRXRDLE1BQUUsQ0FBQyxRQUFRLENBQUU7QUFDWCxhQUFPLEVBQUUsSUFBSTtBQUNiLGFBQU8sRUFBRSxFQUFFO0FBQ1gsYUFBTyxFQUFFLEVBQUU7QUFDWCxhQUFPLEVBQUUsQ0FBQztBQUNWLGFBQU8sRUFBRSxFQUFFO0FBQ1gsYUFBTyxFQUFFLEVBQUU7S0FDWixDQUFFLENBQUM7QUFDSixNQUFFLENBQUMsbUJBQW1CLENBQUUsWUFBTTtBQUFFLGFBQU8sRUFBRSxDQUFDO0tBQUUsQ0FBRSxDQUFDO0FBQy9DLGdCQUFZLENBQUMsR0FBRyxDQUFFLE9BQU8sQ0FBRSxDQUFDLE9BQU8sQ0FBRSxHQUFHLENBQUUsSUFBSSxDQUFFLENBQUUsQ0FBQztBQUNuRCxnQkFBWSxDQUFDLEdBQUcsQ0FBRSxVQUFVLENBQUUsQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFFLENBQUM7QUFDdEQsU0FBSyxDQUFDLEdBQUcsQ0FBRSxVQUFVLENBQUUsQ0FBQyxPQUFPLENBQUUscUJBQXFCLEVBQUUsQ0FBRSxDQUFDO0FBQzNELFNBQUssQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFFLENBQUMsT0FBTyxDQUFFLE9BQU8sQ0FBRSxDQUFDOztBQUczQyx1QkFBTSxNQUFNLENBQUUsRUFBRSxDQUFFLENBQUM7QUFDbkIsV0FBTztBQUNMLGNBQVEsRUFBRSxNQUFNLENBQUUsSUFBSSxFQUFF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LEtBQUssQ0FBQyxPQUFPLENBQUUsTUFBTSxDQUFFLEtBQUssQ0FBQyxFQUFHO0FBQ2xDLGNBQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFFLENBQUM7QUFDMUQsZ0JBQU0sQ0FBRSxFQUFFLENBQUUsR0FBRztBQUNiLGdCQUFJLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDO0FBQ25CLGVBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUM7V0FDcEIsQ0FBQztTQUNIO09BQ0YsQ0FBRSxDQUFDO0FBQ0osYUFBTyxNQUFNLENBQUM7S0FDZjtHQUNGIiwiZmlsZSI6ImxheW91dC5qcyIsInNvdXJjZVJvb3QiOiJzcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGFncmUgZnJvbSAnZGFncmUnO1xuXG5leHBvcnQgZGVmYXVsdCB7IGNhbGN1bGF0ZUxheW91dCB9O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVMYXlvdXQoIGdyYXBoLCBtZWFzdXJlbWVudHMgKSB7XG5cbiAgY29uc3Qgb3duZXJzID0ge1xuICAgIGluYm91bmQ6IHt9LFxuICAgIG91dGJvdW5kOiB7fVxuICB9O1xuXG4gIGNvbnN0IGRnID0gbmV3IGRhZ3JlLmdyYXBobGliLkdyYXBoKCk7XG4gIC8vIGRhZ3JlLmxheW91dCgpLm5vZGVTZXAoIDYwICkucmFua1NlcCggOTAgKS5lZGdlU2VwKCAwICkucmFua0RpciggJ0xSJyApLnJ1biggZGFncmVHcmFwaCApO1xuICBkZy5zZXRHcmFwaCgge1xuICAgIHJhbmtkaXI6ICdMUicsXG4gICAgbm9kZXNlcDogNjAsXG4gICAgcmFua3NlcDogOTAsXG4gICAgZWRnZXNlcDogMCxcbiAgICBtYXJnaW54OiAxNSxcbiAgICBtYXJnaW55OiAxNVxuICB9ICk7XG4gIGRnLnNldERlZmF1bHRFZGdlTGFiZWwoICgpID0+IHsgcmV0dXJuIHt9OyB9ICk7XG4gIG1lYXN1cmVtZW50cy5nZXQoICdlZGdlcycgKS5mb3JFYWNoKCBhZGQoICdFLicgKSApO1xuICBtZWFzdXJlbWVudHMuZ2V0KCAndmVydGljZXMnICkuZm9yRWFjaCggYWRkKCAnVi4nICkgKTtcbiAgZ3JhcGguZ2V0KCAndmVydGljZXMnICkuZm9yRWFjaCggY29sbGVjdE93bmluZ1ZlcnRpY2VzKCkgKTtcbiAgZ3JhcGguZ2V0KCAndmVydGljZXMnICkuZm9yRWFjaCggY29ubmVjdCApO1xuXG5cbiAgZGFncmUubGF5b3V0KCBkZyApO1xuICByZXR1cm4ge1xuICAgIHZlcnRpY2VzOiBkZWNvZGUoICdWLicsIGRnLm5vZGVzKCkgKSxcbiAgICBlZGdlczogZGVjb2RlKCAnRS4nLCBkZy5ub2RlcygpIClcbiAgfTtcblxuXG4gIGZ1bmN0aW9uIGNvbm5lY3QoIHZlcnRleCwgdmVydGV4SWQgKSB7XG4gICAgY29uc3QgZGdWZXJ0ZXhJZCA9ICdWLicgKyB2ZXJ0ZXhJZDtcbiAgICBbIHZlcnRleC5wb3J0cy5pbmJvdW5kLCB2ZXJ0ZXgucG9ydHMub3V0Ym91bmQgXS5mb3JFYWNoKCAoZ3JvdXAsIGdyb3VwTm8pID0+IHtcbiAgICAgIGNvbnN0IGlzSW5ib3VuZCA9IGdyb3VwTm8gPT09IDA7XG4gICAgICBncm91cC5mb3JFYWNoKCAoeyBlZGdlSWQgfSkgPT4ge1xuICAgICAgICBpZiggIWVkZ2VJZCApIHsgcmV0dXJuOyB9XG4gICAgICAgIHZhciBkZ05laWdoYm9ySWQgPSAnRS4nICsgZWRnZUlkO1xuICAgICAgICBpZiggIW1lYXN1cmVtZW50cy5nZXQoICdlZGdlcycgKS5nZXQoIGVkZ2VJZCApICkge1xuICAgICAgICAgIC8vIGludmlzaWJsZSBlZGdlLCBcIm93bmVkXCIgYnkgYSB2ZXJ0ZXhcbiAgICAgICAgICBkZ05laWdoYm9ySWQgPSAnVi4nICsgb3duZXJzWyBpc0luYm91bmQgPyAnb3V0Ym91bmQnIDogJ2luYm91bmQnIF1bIGVkZ2VJZCBdO1xuICAgICAgICB9XG5cbiAgICAgICAgZGcuc2V0RWRnZShcbiAgICAgICAgICBpc0luYm91bmQgPyBkZ05laWdoYm9ySWQgOiBkZ1ZlcnRleElkLFxuICAgICAgICAgIGlzSW5ib3VuZCA/IGRnVmVydGV4SWQgOiBkZ05laWdoYm9ySWRcbiAgICAgICAgKTtcbiAgICAgIH0gKTtcbiAgICB9ICk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGFkZCggcHJlZml4ICkge1xuICAgIHJldHVybiAoeyBkaW1lbnNpb25zOiB7IHdpZHRoLCBoZWlnaHQgfSB9LCBub2RlSWQpID0+IHtcbiAgICAgIGNvbnN0IGRnTm9kZUlkID0gcHJlZml4ICsgbm9kZUlkO1xuICAgICAgZGcuc2V0Tm9kZSggZGdOb2RlSWQsIHsgbGFiZWw6IGRnTm9kZUlkLCB3aWR0aCwgaGVpZ2h0IH0gKTtcbiAgICB9O1xuICB9XG5cblxuICBmdW5jdGlvbiBjb2xsZWN0T3duaW5nVmVydGljZXMoKSB7XG4gICAgcmV0dXJuICggdmVydGV4LCB2ZXJ0ZXhJZCApID0+IHtcbiAgICAgIFsgdmVydGV4LnBvcnRzLmluYm91bmQsIHZlcnRleC5wb3J0cy5vdXRib3VuZCBdLmZvckVhY2goIChncm91cCwgZ3JvdXBObykgPT4ge1xuICAgICAgICBjb25zdCBpc0luYm91bmQgPSBncm91cE5vID09PSAwO1xuICAgICAgICBncm91cC5mb3JFYWNoKCAoeyBlZGdlSWQgfSkgPT4ge1xuICAgICAgICAgIGlmKCAhZWRnZUlkICkgeyByZXR1cm47IH1cbiAgICAgICAgICBvd25lcnNbIGlzSW5ib3VuZCA/ICdpbmJvdW5kJyA6ICdvdXRib3VuZCcgXVsgZWRnZUlkIF0gPSB2ZXJ0ZXhJZDtcbiAgICAgICAgfSApO1xuICAgICAgfSApO1xuICAgIH07XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGRlY29kZSggcHJlZml4LCBkZ05vZGVzICkge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBkZ05vZGVzLmZvckVhY2goIGRnTm9kZUlkID0+IHtcbiAgICAgIGNvbnN0IHsgbGFiZWwsIHdpZHRoLCBoZWlnaHQsIHgsIHkgfSA9IGRnLm5vZGUoIGRnTm9kZUlkICk7XG4gICAgICBpZiggbGFiZWwuaW5kZXhPZiggcHJlZml4ICkgPT09IDAgKSB7XG4gICAgICAgIGNvbnN0IGlkID0gbGFiZWwuc3Vic3RyaW5nKCBwcmVmaXgubGVuZ3RoLCBsYWJlbC5sZW5ndGggKTtcbiAgICAgICAgcmVzdWx0WyBpZCBdID0ge1xuICAgICAgICAgIGxlZnQ6IHggLSB3aWR0aCAvIDIsXG4gICAgICAgICAgdG9wOiB5IC0gaGVpZ2h0IC8gMlxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=