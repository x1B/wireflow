define(['exports', 'module', 'dagre'], function (exports, module, _dagre) {
  'use strict';

  module.exports = { calculateLayout: calculateLayout };

  function calculateLayout(graph, measurements) {

    window.console.log('GRAPH: ', graph.toJS()); // :TODO: DELETE ME
    window.console.log('MEASUREMENTS: ', measurements.toJS()); // :TODO: DELETE ME

    var owners = {
      inbound: {},
      outbound: {}
    };

    var dg = new _dagre.graphlib.Graph();
    // dagre.layout().nodeSep( 60 ).rankSep( 90 ).edgeSep( 0 ).rankDir( 'LR' ).run( dagreGraph );
    dg.setGraph({
      rankdir: 'LR',
      nodesep: 60,
      ranksep: 90,
      edgesep: 0,
      marginx: 15,
      marginy: 15
    });
    dg.setDefaultEdgeLabel(function () {
      return {};
    });
    measurements.get('edges').forEach(add('E.'));
    measurements.get('vertices').forEach(add('V.'));
    graph.get('vertices').forEach(collectOwningVertices());
    graph.get('vertices').forEach(connect);

    _dagre.layout(dg);
    return {
      vertices: decode('V.', dg.nodes()),
      edges: decode('E.', dg.nodes())
    };

    function connect(vertex, vertexId) {
      var dgVertexId = 'V.' + vertexId;
      [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
        var isInbound = groupNo === 0;
        group.forEach(function (_ref) {
          var edgeId = _ref.edgeId;

          if (!edgeId) {
            return;
          }
          var dgNeighborId = 'E.' + edgeId;
          if (!measurements.get('edges').get(edgeId)) {
            // invisible edge, "owned" by a vertex
            dgNeighborId = 'V.' + owners[isInbound ? 'outbound' : 'inbound'][edgeId];
          }

          window.console.log('CON', isInbound ? dgNeighborId : dgVertexId, ' --> ', isInbound ? dgVertexId : dgNeighborId);
          dg.setEdge(isInbound ? dgNeighborId : dgVertexId, isInbound ? dgVertexId : dgNeighborId);
        });
      });
    }

    function add(prefix) {
      return function (_ref2, nodeId) {
        var _ref2$dimensions = _ref2.dimensions;
        var width = _ref2$dimensions.width;
        var height = _ref2$dimensions.height;

        var dgNodeId = prefix + nodeId;
        dg.setNode(dgNodeId, { label: dgNodeId, width: width, height: height });
      };
    }

    function collectOwningVertices() {
      return function (vertex, vertexId) {
        [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
          var isInbound = groupNo === 0;
          group.forEach(function (_ref3) {
            var edgeId = _ref3.edgeId;

            if (!edgeId) {
              return;
            }
            owners[isInbound ? 'inbound' : 'outbound'][edgeId] = vertexId;
          });
        });
      };
    }

    function decode(prefix, dgNodes) {
      var result = {};
      dgNodes.forEach(function (dgNodeId) {
        var _dg$node = dg.node(dgNodeId);

        var label = _dg$node.label;
        var width = _dg$node.width;
        var height = _dg$node.height;
        var x = _dg$node.x;
        var y = _dg$node.y;

        if (label.indexOf(prefix) === 0) {
          var id = label.substring(prefix.length, label.length);
          result[id] = {
            left: x - width / 2,
            top: y - height / 2
          };
        }
      });
      return result;
    }
  }
});
//# sourceMappingURL=data:application/json;base64,