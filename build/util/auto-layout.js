define(['exports', 'module', 'dagre'], function (exports, module, _dagre) {'use strict';function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _dagre2 = _interopRequireDefault(_dagre);module.exports = 

  { calculateLayout: calculateLayout };

  function calculateLayout(graph, measurements) {

    var owners = { 
      inbound: {}, 
      outbound: {} };


    var dg = new _dagre2['default'].graphlib.Graph();

    dg.setGraph({ 
      rankdir: 'LR', 
      nodesep: 50, 
      ranksep: 60, 
      edgesep: 0, 
      marginx: 15, 
      marginy: 15 });

    dg.setDefaultEdgeLabel(function () {return {};});
    measurements.get('edges').forEach(add('E.'));
    measurements.get('vertices').forEach(add('V.'));
    graph.get('vertices').forEach(collectOwningVertices());
    graph.get('vertices').forEach(connect);


    _dagre2['default'].layout(dg);
    return { 
      vertices: decode('V.', dg.nodes()), 
      edges: decode('E.', dg.nodes(), { offsetY: 23, offsetX: -15 }) };



    function connect(vertex, vertexId) {
      var dgVertexId = 'V.' + vertexId;
      [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
        var isInbound = groupNo === 0;
        group.forEach(function (_ref) {var edgeId = _ref.edgeId;
          if (!edgeId) {return;}
          var dgNeighborId = 'E.' + edgeId;
          if (!measurements.get('edges').get(edgeId)) {
            // invisible edge, "owned" by a vertex
            dgNeighborId = 'V.' + owners[isInbound ? 'outbound' : 'inbound'][edgeId];}


          dg.setEdge(
          isInbound ? dgNeighborId : dgVertexId, 
          isInbound ? dgVertexId : dgNeighborId);});});}






    function add(prefix) {
      return function (_ref2, nodeId) {var _ref2$dimensions = _ref2.dimensions;var width = _ref2$dimensions.width;var height = _ref2$dimensions.height;
        var dgNodeId = prefix + nodeId;
        dg.setNode(dgNodeId, { label: dgNodeId, width: width, height: height });};}




    function collectOwningVertices() {
      return function (vertex, vertexId) {
        [vertex.ports.inbound, vertex.ports.outbound].forEach(function (group, groupNo) {
          var isInbound = groupNo === 0;
          group.forEach(function (_ref3) {var edgeId = _ref3.edgeId;
            if (!edgeId) {return;}
            owners[isInbound ? 'inbound' : 'outbound'][edgeId] = vertexId;});});};}






    function decode(prefix, dgNodes) {var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];var _options$offsetY = 
      options.offsetY;var offsetY = _options$offsetY === undefined ? 0 : _options$offsetY;var _options$offsetX = options.offsetX;var offsetX = _options$offsetX === undefined ? 0 : _options$offsetX;
      var result = {};
      dgNodes.forEach(function (dgNodeId) {var _ref4 = 
        dg.node(dgNodeId) || {};var label = _ref4.label;var width = _ref4.width;var height = _ref4.height;var x = _ref4.x;var y = _ref4.y;
        if (label && label.indexOf(prefix) === 0) {
          var id = label.substring(prefix.length, label.length);
          result[id] = { 
            left: x - width / 2 + offsetX, 
            top: y - height / 2 + offsetY };}});



      return result;}}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2F1dG8tbGF5b3V0LmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVlLElBQUUsZUFBZSxFQUFmLGVBQWUsRUFBRTs7QUFFbEMsV0FBUyxlQUFlLENBQUUsS0FBSyxFQUFFLFlBQVksRUFBRzs7QUFFOUMsUUFBTSxNQUFNLEdBQUc7QUFDYixhQUFPLEVBQUUsRUFBRTtBQUNYLGNBQVEsRUFBRSxFQUFFLEVBQ2IsQ0FBQzs7O0FBRUYsUUFBTSxFQUFFLEdBQUcsSUFBSSxtQkFBTSxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7O0FBRXRDLE1BQUUsQ0FBQyxRQUFRLENBQUU7QUFDWCxhQUFPLEVBQUUsSUFBSTtBQUNiLGFBQU8sRUFBRSxFQUFFO0FBQ1gsYUFBTyxFQUFFLEVBQUU7QUFDWCxhQUFPLEVBQUUsQ0FBQztBQUNWLGFBQU8sRUFBRSxFQUFFO0FBQ1gsYUFBTyxFQUFFLEVBQUUsRUFDWixDQUFFLENBQUM7O0FBQ0osTUFBRSxDQUFDLG1CQUFtQixDQUFFLFlBQU0sQ0FBRSxPQUFPLEVBQUUsQ0FBQyxDQUFFLENBQUUsQ0FBQztBQUMvQyxnQkFBWSxDQUFDLEdBQUcsQ0FBRSxPQUFPLENBQUUsQ0FBQyxPQUFPLENBQUUsR0FBRyxDQUFFLElBQUksQ0FBRSxDQUFFLENBQUM7QUFDbkQsZ0JBQVksQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFFLENBQUMsT0FBTyxDQUFFLEdBQUcsQ0FBRSxJQUFJLENBQUUsQ0FBRSxDQUFDO0FBQ3RELFNBQUssQ0FBQyxHQUFHLENBQUUsVUFBVSxDQUFFLENBQUMsT0FBTyxDQUFFLHFCQUFxQixFQUFFLENBQUUsQ0FBQztBQUMzRCxTQUFLLENBQUMsR0FBRyxDQUFFLFVBQVUsQ0FBRSxDQUFDLE9BQU8sQ0FBRSxPQUFPLENBQUUsQ0FBQzs7O0FBRzNDLHVCQUFNLE1BQU0sQ0FBRSxFQUFFLENBQUUsQ0FBQztBQUNuQixXQUFPO0FBQ0wsY0FBUSxFQUFFLE1BQU0sQ0FBRSxJQUFJLEVB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QUMsT0FBTyxDQUFFLFVBQUEsUUFBUSxFQUFJO0FBQ1ksVUFBRSxDQUFDLElBQUksQ0FBRSxRQUFRLENBQUUsSUFBSSxFQUFFLEtBQXhELEtBQUssU0FBTCxLQUFLLEtBQUUsS0FBSyxTQUFMLEtBQUssS0FBRSxNQUFNLFNBQU4sTUFBTSxLQUFFLENBQUMsU0FBRCxDQUFDLEtBQUUsQ0FBQyxTQUFELENBQUM7QUFDbEMsWUFBSSxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBRSxNQUFNLENBQUUsS0FBSyxDQUFDLEVBQUc7QUFDM0MsY0FBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBRSxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUUsQ0FBQztBQUMxRCxnQkFBTSxDQUFFLEVBQUUsQ0FBRSxHQUFHO0FBQ2IsZ0JBQUksRUFBRSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBRyxPQUFPO0FBQzdCLGVBQUcsRUFBRSxDQUFDLEdBQUcsTUFBTSxHQUFHLENBQUMsR0FBRyxPQUFPLEVBQzlCLENBQUMsQ0FDSCxDQUNGLENBQUUsQ0FBQzs7OztBQUNKLGFBQU8sTUFBTSxDQUFDLENBQ2YsQ0FDRiIsImZpbGUiOiJhdXRvLWxheW91dC5qcyIsInNvdXJjZVJvb3QiOiJzcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGFncmUgZnJvbSAnZGFncmUnO1xuXG5leHBvcnQgZGVmYXVsdCB7IGNhbGN1bGF0ZUxheW91dCB9O1xuXG5mdW5jdGlvbiBjYWxjdWxhdGVMYXlvdXQoIGdyYXBoLCBtZWFzdXJlbWVudHMgKSB7XG5cbiAgY29uc3Qgb3duZXJzID0ge1xuICAgIGluYm91bmQ6IHt9LFxuICAgIG91dGJvdW5kOiB7fVxuICB9O1xuXG4gIGNvbnN0IGRnID0gbmV3IGRhZ3JlLmdyYXBobGliLkdyYXBoKCk7XG5cbiAgZGcuc2V0R3JhcGgoIHtcbiAgICByYW5rZGlyOiAnTFInLFxuICAgIG5vZGVzZXA6IDUwLFxuICAgIHJhbmtzZXA6IDYwLFxuICAgIGVkZ2VzZXA6IDAsXG4gICAgbWFyZ2lueDogMTUsXG4gICAgbWFyZ2lueTogMTVcbiAgfSApO1xuICBkZy5zZXREZWZhdWx0RWRnZUxhYmVsKCAoKSA9PiB7IHJldHVybiB7fTsgfSApO1xuICBtZWFzdXJlbWVudHMuZ2V0KCAnZWRnZXMnICkuZm9yRWFjaCggYWRkKCAnRS4nICkgKTtcbiAgbWVhc3VyZW1lbnRzLmdldCggJ3ZlcnRpY2VzJyApLmZvckVhY2goIGFkZCggJ1YuJyApICk7XG4gIGdyYXBoLmdldCggJ3ZlcnRpY2VzJyApLmZvckVhY2goIGNvbGxlY3RPd25pbmdWZXJ0aWNlcygpICk7XG4gIGdyYXBoLmdldCggJ3ZlcnRpY2VzJyApLmZvckVhY2goIGNvbm5lY3QgKTtcblxuXG4gIGRhZ3JlLmxheW91dCggZGcgKTtcbiAgcmV0dXJuIHtcbiAgICB2ZXJ0aWNlczogZGVjb2RlKCAnVi4nLCBkZy5ub2RlcygpICksXG4gICAgZWRnZXM6IGRlY29kZSggJ0UuJywgZGcubm9kZXMoKSwgeyBvZmZzZXRZOiAyMywgb2Zmc2V0WDogLTE1IH0gKVxuICB9O1xuXG5cbiAgZnVuY3Rpb24gY29ubmVjdCggdmVydGV4LCB2ZXJ0ZXhJZCApIHtcbiAgICBjb25zdCBkZ1ZlcnRleElkID0gJ1YuJyArIHZlcnRleElkO1xuICAgIFsgdmVydGV4LnBvcnRzLmluYm91bmQsIHZlcnRleC5wb3J0cy5vdXRib3VuZCBdLmZvckVhY2goIChncm91cCwgZ3JvdXBObykgPT4ge1xuICAgICAgY29uc3QgaXNJbmJvdW5kID0gZ3JvdXBObyA9PT0gMDtcbiAgICAgIGdyb3VwLmZvckVhY2goICh7IGVkZ2VJZCB9KSA9PiB7XG4gICAgICAgIGlmKCAhZWRnZUlkICkgeyByZXR1cm47IH1cbiAgICAgICAgbGV0IGRnTmVpZ2hib3JJZCA9ICdFLicgKyBlZGdlSWQ7XG4gICAgICAgIGlmKCAhbWVhc3VyZW1lbnRzLmdldCggJ2VkZ2VzJyApLmdldCggZWRnZUlkICkgKSB7XG4gICAgICAgICAgLy8gaW52aXNpYmxlIGVkZ2UsIFwib3duZWRcIiBieSBhIHZlcnRleFxuICAgICAgICAgIGRnTmVpZ2hib3JJZCA9ICdWLicgKyBvd25lcnNbIGlzSW5ib3VuZCA/ICdvdXRib3VuZCcgOiAnaW5ib3VuZCcgXVsgZWRnZUlkIF07XG4gICAgICAgIH1cblxuICAgICAgICBkZy5zZXRFZGdlKFxuICAgICAgICAgIGlzSW5ib3VuZCA/IGRnTmVpZ2hib3JJZCA6IGRnVmVydGV4SWQsXG4gICAgICAgICAgaXNJbmJvdW5kID8gZGdWZXJ0ZXhJZCA6IGRnTmVpZ2hib3JJZFxuICAgICAgICApO1xuICAgICAgfSApO1xuICAgIH0gKTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gYWRkKCBwcmVmaXggKSB7XG4gICAgcmV0dXJuICh7IGRpbWVuc2lvbnM6IHsgd2lkdGgsIGhlaWdodCB9IH0sIG5vZGVJZCkgPT4ge1xuICAgICAgY29uc3QgZGdOb2RlSWQgPSBwcmVmaXggKyBub2RlSWQ7XG4gICAgICBkZy5zZXROb2RlKCBkZ05vZGVJZCwgeyBsYWJlbDogZGdOb2RlSWQsIHdpZHRoLCBoZWlnaHQgfSApO1xuICAgIH07XG4gIH1cblxuXG4gIGZ1bmN0aW9uIGNvbGxlY3RPd25pbmdWZXJ0aWNlcygpIHtcbiAgICByZXR1cm4gKCB2ZXJ0ZXgsIHZlcnRleElkICkgPT4ge1xuICAgICAgWyB2ZXJ0ZXgucG9ydHMuaW5ib3VuZCwgdmVydGV4LnBvcnRzLm91dGJvdW5kIF0uZm9yRWFjaCggKGdyb3VwLCBncm91cE5vKSA9PiB7XG4gICAgICAgIGNvbnN0IGlzSW5ib3VuZCA9IGdyb3VwTm8gPT09IDA7XG4gICAgICAgIGdyb3VwLmZvckVhY2goICh7IGVkZ2VJZCB9KSA9PiB7XG4gICAgICAgICAgaWYoICFlZGdlSWQgKSB7IHJldHVybjsgfVxuICAgICAgICAgIG93bmVyc1sgaXNJbmJvdW5kID8gJ2luYm91bmQnIDogJ291dGJvdW5kJyBdWyBlZGdlSWQgXSA9IHZlcnRleElkO1xuICAgICAgICB9ICk7XG4gICAgICB9ICk7XG4gICAgfTtcbiAgfVxuXG5cbiAgZnVuY3Rpb24gZGVjb2RlKCBwcmVmaXgsIGRnTm9kZXMsIG9wdGlvbnMgPSB7fSApIHtcbiAgICBjb25zdCB7IG9mZnNldFkgPSAwLCBvZmZzZXRYID0gMCB9ID0gb3B0aW9ucztcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgZGdOb2Rlcy5mb3JFYWNoKCBkZ05vZGVJZCA9PiB7XG4gICAgICBjb25zdCB7IGxhYmVsLCB3aWR0aCwgaGVpZ2h0LCB4LCB5IH0gPSBkZy5ub2RlKCBkZ05vZGVJZCApIHx8IHt9O1xuICAgICAgaWYoIGxhYmVsICYmIGxhYmVsLmluZGV4T2YoIHByZWZpeCApID09PSAwICkge1xuICAgICAgICBjb25zdCBpZCA9IGxhYmVsLnN1YnN0cmluZyggcHJlZml4Lmxlbmd0aCwgbGFiZWwubGVuZ3RoICk7XG4gICAgICAgIHJlc3VsdFsgaWQgXSA9IHtcbiAgICAgICAgICBsZWZ0OiB4IC0gd2lkdGggLyAyICsgb2Zmc2V0WCxcbiAgICAgICAgICB0b3A6IHkgLSBoZWlnaHQgLyAyICsgb2Zmc2V0WVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG4iXX0=