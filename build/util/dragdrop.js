define(['exports', 'module', '../polyfill/object-assign'], function (exports, module, _polyfillObjectAssign) {
  'use strict';

  module.exports = dragdrop;
  var abs = Math.abs;

  var defaultDragThreshold = 3;

  function dragdrop(options) {

    var noOp = function noOp() {
      return true;
    };
    var doc = window.document;

    var _Object$assign = Object.assign({
      onBeforeStart: noOp,
      dragThreshold: defaultDragThreshold,
      onStart: noOp,
      onMove: noOp,
      onCancel: noOp,
      onDrop: noOp,
      onEnd: noOp,
      onClick: noOp,
      containerNode: doc.documentElement,
      getDropResult: null
    }, options);

    var onBeforeStart = _Object$assign.onBeforeStart;
    var dragThreshold = _Object$assign.dragThreshold;
    var onStart = _Object$assign.onStart;
    var onMove = _Object$assign.onMove;
    var onCancel = _Object$assign.onCancel;
    var onDrop = _Object$assign.onDrop;
    var onEnd = _Object$assign.onEnd;
    var onClick = _Object$assign.onClick;
    var containerNode = _Object$assign.containerNode;
    var getDropResult = _Object$assign.getDropResult;

    // drag state:
    var dragStarted = false;
    var startClientX = 0;
    var startClientY = 0;
    var dragX = 0;
    var dragY = 0;

    var base = undefined;
    var dragPayload = undefined;
    var dragNode = undefined;
    var dropResult = undefined;
    var dropNode = undefined;

    return { start: start };

    function start(ev, payload, node) {
      // we still need a minimum distance for actual drag
      dragStarted = false;
      var isLeftButton = ev.button === 0;
      var isTouch = (ev.targetTouches || []).length;

      var _ref = isTouch ? ev.targetTouches[0] : ev;

      var target = _ref.target;
      var clientX = _ref.clientX;
      var clientY = _ref.clientY;

      var _target$getBoundingClientRect = target.getBoundingClientRect();

      var left = _target$getBoundingClientRect.left;
      var top = _target$getBoundingClientRect.top;

      var offsetX = clientX - left;
      var offsetY = clientY - top;
      if ((isLeftButton || isTouch) && onBeforeStart(ev, offsetX, offsetY)) {
        base = { baseX: offsetX, baseY: offsetY };
        dragNode = node || ev.currentTarget;
        dragPayload = payload;
        startClientX = clientX;
        startClientY = clientY;

        doc.addEventListener('click', maybeClick);
        doc.addEventListener('mousemove', move);
        doc.addEventListener('touchmove', move);
        doc.addEventListener('mouseup', tryDrop);
        doc.addEventListener('touchend', tryDrop);
        doc.addEventListener('touchcancel', cancel);
        ev.preventDefault();
      }
    }

    function move(ev) {
      var isTouch = (ev.targetTouches || []).length;

      var _ref2 = isTouch ? ev.targetTouches[0] : ev;

      var clientX = _ref2.clientX;
      var clientY = _ref2.clientY;

      dragX = clientX - startClientX;
      dragY = clientY - startClientY;

      if (!dragStarted && abs(dragX) < dragThreshold && abs(dragY) < dragThreshold) {
        return;
      }

      if (!dragStarted) {
        onStart(ev);
        dragStarted = true;
      }

      var _anyDropResult = anyDropResult(clientX, clientY);

      var node = _anyDropResult.node;
      var result = _anyDropResult.result;

      dropNode = node;
      dropResult = result;
      onMove(state(), ev);
    }

    function cancel(ev) {
      onCancel(state(), ev);
      end(ev);
    }

    function tryDrop(ev) {
      (dropResult ? onDrop : onCancel)(state(), ev);
      end(ev);
    }

    function end(ev) {
      doc.removeEventListener('mousemove', move);
      doc.removeEventListener('touchmove', move);
      doc.removeEventListener('mouseup', tryDrop);
      doc.removeEventListener('touchend', tryDrop);
      doc.removeEventListener('touchcancel', cancel);
      dragPayload = dropNode = dropResult = null;
      onEnd(state(), ev);
    }

    function maybeClick(ev) {
      doc.removeEventListener('click', maybeClick);
      if (!dragStarted) {
        onClick(ev);
      }
    }

    function anyDropResult(clientX, clientY) {
      var node = null;
      var result = null;
      if (!getDropResult) {
        return { node: node, result: result };
      }

      node = doc.elementFromPoint(clientX, clientY);
      while (node && node !== containerNode) {
        result = getDropResult(node, dragPayload);
        // truthy: use as result
        if (result) {
          break;
        }
        // false: cancel looking immediately
        if (result === false) {
          node = null;
          break;
        }
        // falsy but not false: keep looking
        node = node.parentNode;
      }
      return { node: node, result: result };
    }

    function state() {
      return {
        base: base,
        dragPayload: dragPayload,
        dragNode: dragNode,
        dragX: dragX,
        dragY: dragY,
        dropResult: dropResult,
        dropNode: dropNode
      };
    }
  }
});
//# sourceMappingURL=data:application/json;base64,