define(['exports'], function (exports) {'use strict';Object.defineProperty(exports, '__esModule', { value: true });exports.calculateMeasurements = calculateMeasurements;var min = Math.min;var max = Math.max;

  var TITLE_OFFSET = 24;
  var PORT_HEIGHT = 16;
  var PORT_OFFSET = 8;

  function calculateMeasurements(graph) {

    return { 
      vertices: graph.get('vertices').map(function (vertex) {var 
        ports = vertex.ports;
        var numPortRows = max(ports.inbound.size, ports.outbound.size);

        var dimensions = { 
          width: estimateWidth(vertex), 
          height: TITLE_OFFSET + numPortRows * PORT_HEIGHT };


        var inbound = {};
        ports.inbound.forEach(function (port, i) {
          inbound[port.id] = { 
            left: PORT_OFFSET, 
            top: TITLE_OFFSET + i * PORT_HEIGHT + PORT_OFFSET };});


        var outbound = {};
        ports.outbound.forEach(function (_ref, i) {var id = _ref.id;
          outbound[id] = { 
            left: dimensions.width - PORT_OFFSET, 
            top: TITLE_OFFSET + i * PORT_HEIGHT + PORT_OFFSET };});



        return { dimensions: dimensions, inbound: inbound, outbound: outbound };}), 


      edges: graph.get('edges').map(function (_) {return { 
          dimensions: { 
            width: 40, 
            height: 40 } };}) };}






  function estimateWidth(vertex) {
    var w = function w(_ref2) {var label = _ref2.label;var id = _ref2.id;return 40 + 5.5 * (label || id || '').length;};
    var max = function max(a, b) {return a > b ? a : b;};var 
    ports = vertex.ports;

    var portsWidth = 
    ports.inbound.map(w).reduce(max, 40) + 
    ports.outbound.map(w).reduce(max, 40);
    return max(w(vertex), portsWidth);}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2F1dG8tbWVhc3VyZW1lbnRzLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiNktBQVEsR0FBRyxHQUFVLElBQUksQ0FBakIsR0FBRyxLQUFFLEdBQUcsR0FBSyxJQUFJLENBQVosR0FBRzs7QUFFaEIsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQUN2QixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUM7O0FBRWYsV0FBUyxxQkFBcUIsQ0FBRSxLQUFLLEVBQUc7O0FBRTdDLFdBQU87QUFDTCxjQUFRLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBRSxVQUFVLENBQUUsQ0FBQyxHQUFHLENBQUUsVUFBQSxNQUFNLEVBQUk7QUFDdkMsYUFBSyxHQUFLLE1BQU0sQ0FBaEIsS0FBSztBQUNiLFlBQU0sV0FBVyxHQUFHLEdBQUcsQ0FBRSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBRSxDQUFDOztBQUVuRSxZQUFNLFVBQVUsR0FBRztBQUNqQixlQUFLLEVBQUUsYUFBYSxDQUFFLE1BQU0sQ0FBRTtBQUM5QixnQkFBTSxFQUFFLFlBQVksR0FBRyxXQUFXLEdBQUMsV0FBVyxFQUMvQyxDQUFDOzs7QUFFRixZQUFNLE9BQU8sR0FBRyxFQUFFLENBQUM7QUFDbkIsYUFBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUUsVUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFLO0FBQ2xDLGlCQUFPLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBRSxHQUFHO0FBQ25CLGdCQUFJLEVBQUUsV0FBVztBQUNqQixlQUFHLEVBQUUsWUFBWSxHQUFHLENBQUMsR0FBRyxXQUFXLEdBQUcsV0FBVyxFQUNsRCxDQUFDLENBQ0gsQ0FBRSxDQUFDOzs7QUFDSixZQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDcEIsYUFBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUUsVUFBQyxJQUFNLEVBQUUsQ0FBQyxFQUFLLEtBQVosRUFBRSxHQUFKLElBQU0sQ0FBSixFQUFFO0FBQzNCLGtCQUFRLENBQUUsRUFBRSxDQUFFLEdBQUc7QUFDZixnQkFBSSxFQUFFLFVBQVUsQ0FBQyxLQUFLLEdBQUcsV0FBVztBQUNwQyxlQUFHLEVBQUUsWUFBWSxHQUFHLENBQUMsR0FBRyxXQUFXLEdBQUcsV0FBVyxFQUNsRCxDQUFDLENBQ0gsQ0FBRSxDQUFDOzs7O0FBRUosZUFBTyxFQUFFLFVBQVUsRUFBVixVQUFVLEVBQUUsT0FBTyxFQUFQLE9BQU8sRUFBRSxRQUFRLEVBQVIsUUFBUSxFQUFFLENBQUMsQ0FDMUMsQ0FBRTs7O0FBRUgsV0FBSyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUUsT0FBTyxDQUFFLENBQUMsR0FBRyxDQUFFLFVBQUEsQ0FBQyxVQUFLO0FBQ3JDLG9CQUFVLEVBQUU7QUFDVixpQkFBSyxFQUFFLEVBQUU7QUFDVCxrQkFBTSxFQUFFLEVBQUUsRUFDWCxFQUNGLEVBQUMsQ0FBRSxFQUNMLENBQUMsQ0FFSDs7Ozs7OztBQUVELFdBQVMsYUFBYSxDQUFFLE1BQU0sRUFBRztBQUMvQixRQUFNLENBQUMsR0FBRyxTQUFKLENBQUMsQ0FBSSxLQUFhLE9BQVgsS0FBSyxHQUFQLEtBQWEsQ0FBWCxLQUFLLEtBQUUsRUFBRSxHQUFYLEtBQWEsQ0FBSixFQUFFLFFBQU8sRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFFLEtBQUssSUFBSSxFQUFFLElBQUksRUFBRSxDQUFBLENBQUcsTUFBTSxFQUFBLENBQUM7QUFDckUsUUFBTSxHQUFHLEdBQUcsU0FBTixHQUFHLENBQUksQ0FBQyxFQUFFLENBQUMsVUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUEsQ0FBQztBQUM1QixTQUFLLEdBQUssTUFBTSxDQUFoQixLQUFLOztBQUViLFFBQU0sVUFBVTtBQUNkLFNBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBRSxHQUFHLEVBQUUsRUFBRSxDQUFFO0FBQ3hDLFNBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFFLENBQUMsQ0FBRSxDQUFDLE1BQU0sQ0FBRSxHQUFHLEVBQUUsRUFBRSxDQUFFLENBQUE7QUFDM0MsV0FBTyxHQUFHLENBQUUsQ0FBQyxDQUFFLE1BQU0sQ0FBRSxFQUFDLFVBQVUsQ0FBRSxDQUFDLENBQ3RDIiwiZmlsZSI6ImF1dG8tbWVhc3VyZW1lbnRzLmpzIiwic291cmNlUm9vdCI6InNyYyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgbWluLCBtYXggfSA9IE1hdGg7XG5cbmNvbnN0IFRJVExFX09GRlNFVCA9IDI0O1xuY29uc3QgUE9SVF9IRUlHSFQgPSAxNjtcbmNvbnN0IFBPUlRfT0ZGU0VUID0gODtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU1lYXN1cmVtZW50cyggZ3JhcGggKSB7XG5cbiAgcmV0dXJuIHtcbiAgICB2ZXJ0aWNlczogZ3JhcGguZ2V0KCAndmVydGljZXMnICkubWFwKCB2ZXJ0ZXggPT4ge1xuICAgICAgY29uc3QgeyBwb3J0cyB9ID0gdmVydGV4O1xuICAgICAgY29uc3QgbnVtUG9ydFJvd3MgPSBtYXgoIHBvcnRzLmluYm91bmQuc2l6ZSwgcG9ydHMub3V0Ym91bmQuc2l6ZSApO1xuXG4gICAgICBjb25zdCBkaW1lbnNpb25zID0ge1xuICAgICAgICB3aWR0aDogZXN0aW1hdGVXaWR0aCggdmVydGV4ICksXG4gICAgICAgIGhlaWdodDogVElUTEVfT0ZGU0VUICsgbnVtUG9ydFJvd3MqUE9SVF9IRUlHSFRcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGluYm91bmQgPSB7fTtcbiAgICAgIHBvcnRzLmluYm91bmQuZm9yRWFjaCggKHBvcnQsIGkpID0+IHtcbiAgICAgICAgaW5ib3VuZFsgcG9ydC5pZCBdID0ge1xuICAgICAgICAgIGxlZnQ6IFBPUlRfT0ZGU0VULFxuICAgICAgICAgIHRvcDogVElUTEVfT0ZGU0VUICsgaSAqIFBPUlRfSEVJR0hUICsgUE9SVF9PRkZTRVRcbiAgICAgICAgfTtcbiAgICAgIH0gKTtcbiAgICAgIGNvbnN0IG91dGJvdW5kID0ge307XG4gICAgICBwb3J0cy5vdXRib3VuZC5mb3JFYWNoKCAoeyBpZCB9LCBpKSA9PiB7XG4gICAgICAgIG91dGJvdW5kWyBpZCBdID0ge1xuICAgICAgICAgIGxlZnQ6IGRpbWVuc2lvbnMud2lkdGggLSBQT1JUX09GRlNFVCxcbiAgICAgICAgICB0b3A6IFRJVExFX09GRlNFVCArIGkgKiBQT1JUX0hFSUdIVCArIFBPUlRfT0ZGU0VUXG4gICAgICAgIH07XG4gICAgICB9ICk7XG5cbiAgICAgIHJldHVybiB7IGRpbWVuc2lvbnMsIGluYm91bmQsIG91dGJvdW5kIH07XG4gICAgfSApLFxuXG4gICAgZWRnZXM6IGdyYXBoLmdldCggJ2VkZ2VzJyApLm1hcCggXyA9PiAoe1xuICAgICAgZGltZW5zaW9uczoge1xuICAgICAgICB3aWR0aDogNDAsXG4gICAgICAgIGhlaWdodDogNDBcbiAgICAgIH1cbiAgICB9KSApXG4gIH07XG5cbn1cblxuZnVuY3Rpb24gZXN0aW1hdGVXaWR0aCggdmVydGV4ICkge1xuICBjb25zdCB3ID0gKHsgbGFiZWwsIGlkIH0pID0+IDQwICsgNS41ICogKCBsYWJlbCB8fCBpZCB8fCAnJyApLmxlbmd0aDtcbiAgY29uc3QgbWF4ID0gKGEsIGIpID0+IGEgPiBiID8gYSA6IGI7XG4gIGNvbnN0IHsgcG9ydHMgfSA9IHZlcnRleDtcblxuICBjb25zdCBwb3J0c1dpZHRoID1cbiAgICBwb3J0cy5pbmJvdW5kLm1hcCggdyApLnJlZHVjZSggbWF4LCA0MCApICtcbiAgICBwb3J0cy5vdXRib3VuZC5tYXAoIHcgKS5yZWR1Y2UoIG1heCwgNDAgKVxuICByZXR1cm4gbWF4KCB3KCB2ZXJ0ZXggKSxwb3J0c1dpZHRoICk7XG59XG4iXX0=