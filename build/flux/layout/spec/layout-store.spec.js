define(['exports', 'immutable', '../layout-store', '../../../testing/dispatcher-mock', '../../../testing/diff', '../../graph/graph-actions', '../layout-actions', '../../history/history-actions', '../../graph/graph-model', '../layout-model', './data', '../../graph/spec/data'], function (exports, _immutable, _layoutStore, _testingDispatcherMock, _testingDiff, _graphGraphActions, _layoutActions, _historyHistoryActions, _graphGraphModel, _layoutModel, _data, _graphSpecData) {'use strict';function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _LayoutStore = _interopRequireDefault(_layoutStore);var _DispatcherMock = _interopRequireDefault(_testingDispatcherMock);var _diff = _interopRequireDefault(_testingDiff);var _data2 = _interopRequireDefault(_data);var _graphData = _interopRequireDefault(_graphSpecData);





























  function dummyGraph() {
    return _graphGraphModel.convert.graph(_graphData['default'].initial.graph);}


  function dummyLayout() {
    return _layoutModel.convert.layout(_data2['default'].initial.layout);}


  function dummyMeasurements() {
    return _layoutModel.convert.measurements(_data2['default'].initial.measurements);}



  // Jasmine:
  var jasmine = window.jasmine;var describe = window.describe;var beforeEach = window.beforeEach;var expect = window.expect;var it = window.it;var 
  any = jasmine.any;

  describe('A layout store', function () {

    var dispatcher;
    var store;
    var graphStoreMock;

    beforeEach(function () {
      dispatcher = new _DispatcherMock['default']();
      graphStoreMock = { graph: dummyGraph() };
      store = new _LayoutStore['default'](dispatcher, graphStoreMock, { 
        layout: dummyLayout() });});



    it('stores the layout passed at creation', function () {
      var expected = dummyLayout().vertices.get('vA').toJS();
      var actual = store.layout.vertices.get('vA').toJS();
      expect((0, _diff['default'])(expected, actual)).toEqual({});});


    it('handles layout state actions', function () {
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.MeasureVertex, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.MeasureEdge, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.MoveEdge, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.MoveVertex, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.HandleEdgeInserted, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_layoutActions.AutoLayout, any(Function));});


    it('stores its initial state to history', function () {
      expect(dispatcher.dispatch).
      toHaveBeenCalledWith((0, _historyHistoryActions.SaveState)({ 
        storeId: 'LayoutStore', 
        state: _immutable.List.of(dummyLayout(), jasmine.any(Object)) }));});



    describe('asked to store edge measurements', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _layoutActions.MeasureEdge)({ 
          edge: dummyGraph().edges.get('r0'), 
          measurements: dummyMeasurements().edges.get('r0') }));});



      it('adds that edge to the measurements', function () {
        expect(store.measurements.edges.has('r0')).toBe(true);});});



    describe('asked to remove a complex edge', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphGraphActions.RemoveEdge)({ edgeId: 'r0' }));});


      it('removes that edge from the layout', function () {
        var actual = store.layout.toJS();
        expect(actual.edges.r0).not.toBeDefined();});});




    describe('asked to store vertex measurements', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _layoutActions.MeasureVertex)({ 
          vertex: dummyGraph().vertices.get('vA'), 
          measurements: dummyMeasurements().vertices.get('vA') }));});



      it('adds that vertex to the measurements', function () {
        expect(store.measurements.vertices.has('vA')).toBe(true);});});



    describe('asked to remove a vertex', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphGraphActions.RemoveVertex)({ vertexId: 'vA' }));});


      it('removes that vertex from the layout', function () {
        expect(store.layout.vertices.has('vA')).toBe(false);});


      it('removes that vertex from the measurements', function () {
        expect(store.measurements.vertices.has('vA')).toBe(false);});});



    describe('asked to move a vertex', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _layoutActions.MoveVertex)({ 
          vertex: dummyGraph().vertices.get('vA'), 
          to: (0, _layoutModel.Coords)({ left: 17, top: 4 }) }));});



      it('updates that vertices\' coordinates', function () {
        expect(store.layout.vertices.get('vA').toJS()).toEqual({ 
          left: 17, top: 4 });});});




    describe('asked to move an edge', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _layoutActions.MoveEdge)({ 
          edge: dummyGraph().edges.get('r0'), 
          to: (0, _layoutModel.Coords)({ left: 170, top: 40 }) }));});



      it('updates that edges\' coordinates', function () {
        expect(store.layout.edges.get('r0').toJS()).toEqual({ 
          left: 170, top: 40 });});});




    describe('with measurements for all nodes', function () {

      beforeEach(function () {
        dummyMeasurements().vertices.forEach(function (measurements, vId) {
          var vertex = dummyGraph().vertices.get(vId);
          dispatcher.handleAction((0, _layoutActions.MeasureVertex)({ vertex: vertex, measurements: measurements }));});

        dummyMeasurements().edges.forEach(function (measurements, eId) {
          var edge = dummyGraph().edges.get(eId);
          dispatcher.handleAction((0, _layoutActions.MeasureEdge)({ edge: edge, measurements: measurements }));});});



      describe('asked to remove a vertex', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _graphGraphActions.RemoveVertex)({ vertexId: 'vA' }));});

        it('removes that vertex from the measurements', function () {
          expect(store.measurements.vertices.has('vA')).toBe(false);});});



      describe('asked to remove a complex edge', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _graphGraphActions.RemoveEdge)({ edgeId: 'r0' }));});


        it('removes that edge from the measurements', function () {
          var actual = store.measurements.toJS();
          expect(actual.edges.r0).not.toBeDefined();});});



      describe('notified of a newly inserted complex edge', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _layoutActions.HandleEdgeInserted)({ 
            edge: (0, _graphGraphModel.Edge)({ id: 'r1', type: 'RESOURCE' }), 
            from: (0, _graphGraphModel.Connectable)({ vertexId: 'vA', portId: 'o0', direction: _graphGraphModel.OUT }), 
            to: (0, _graphGraphModel.Connectable)({ vertexId: 'vC', portId: 'i1', direction: _graphGraphModel.IN }) }));});



        it('places it between the ports it connects', function () {
          var edgeOffset = 10;
          var actual = store.layout.toJS();
          expect(actual.edges.r1).toBeDefined();
          expect(actual.edges.r1).toEqual({ 
            left: -edgeOffset + 0.5 * (
            _data2['default'].initial.layout.vertices.vA.left + 
            _data2['default'].initial.measurements.vertices.vA.outbound.o0.left + 
            _data2['default'].initial.layout.vertices.vC.left + 
            _data2['default'].initial.measurements.vertices.vC.inbound.i1.left), 
            top: -edgeOffset + 0.5 * (
            _data2['default'].initial.layout.vertices.vA.top + 
            _data2['default'].initial.measurements.vertices.vA.outbound.o0.top + 
            _data2['default'].initial.layout.vertices.vC.top + 
            _data2['default'].initial.measurements.vertices.vC.inbound.i1.top) });});});});





    describe('called to apply rename rules', function () {
      var result;
      beforeEach(function () {
        var pseudoSelection = _layoutModel.convert.layout({ 
          vertices: { 
            vA: _data2['default'].initial.layout.vertices.vA, 
            vB: _data2['default'].initial.layout.vertices.vB }, 

          edges: { a0: _data2['default'].initial.layout.edges.a0 } });

        var rules = (0, _immutable.Map)({ 
          vertices: (0, _immutable.Map)({ 'vA': 'vA 1' }), 
          edges: (0, _immutable.Map)({ 'a0': 'a0 1' }) });

        result = store.applyRenameRules(pseudoSelection, rules);});


      it('generates an isomorphic layout based on these rules', function () {
        var expected = _layoutModel.convert.layout({ 
          vertices: { 
            'vA 1': _data2['default'].initial.layout.vertices.vA, 
            vB: _data2['default'].initial.layout.vertices.vB }, 

          edges: { 'a0 1': _data2['default'].initial.layout.edges.a0 } }).
        toJS();
        expect((0, _diff['default'])(expected, result.toJS())).toEqual({});});});



    describe('called to insert a disjoint layout', function () {
      beforeEach(function () {
        var pseudoSelection = _layoutModel.convert.layout({ 
          vertices: { vA: _data2['default'].initial.layout.vertices.vA }, 
          edges: { a0: _data2['default'].initial.layout.edges.a0 } });

        var rules = (0, _immutable.Map)({ 
          vertices: (0, _immutable.Map)({ 'vA': 'vA 1' }), 
          edges: (0, _immutable.Map)({ 'a0': 'a0 1' }) });

        var subLayout = store.applyRenameRules(pseudoSelection, rules);
        store.insert(subLayout);});


      it('extends its own layout with the supplied layout', function () {
        var vA1 = copy(_data2['default'].initial.layout.vertices.vA);
        var a01 = copy(_data2['default'].initial.layout.edges.a0);
        var expected = copy(_data2['default'].initial.layout);
        expected.edges['a0 1'] = a01;
        expected.vertices['vA 1'] = vA1;
        expect((0, _diff['default'])(expected, store.layout.toJS())).toEqual({});});});});





  function copy(_) {return JSON.parse(JSON.stringify(_));}});
//# sourceMappingURL=data:application/json;base64,