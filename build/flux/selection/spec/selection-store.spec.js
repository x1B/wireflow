define(['exports', 'immutable', '../selection-store', '../../../testing/dispatcher-mock', '../../../testing/diff', '../selection-actions', '../../layout/layout-model', '../selection-model', '../../graph/graph-model', '../../graph/graph-actions', '../../layout/spec/data', '../../graph/spec/data'], function (exports, _immutable, _selectionStore, _testingDispatcherMock, _testingDiff, _selectionActions, _layoutLayoutModel, _selectionModel, _graphGraphModel, _graphGraphActions, _layoutSpecData, _graphSpecData) {'use strict';function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _SelectionStore = _interopRequireDefault(_selectionStore);var _DispatcherMock = _interopRequireDefault(_testingDispatcherMock);var _diff = _interopRequireDefault(_testingDiff);var _layoutData = _interopRequireDefault(_layoutSpecData);var _graphData = _interopRequireDefault(_graphSpecData);











































  function dummyGraph() {
    return _graphGraphModel.convert.graph(_graphData['default'].initial.graph);}


  function dummyLayout() {
    return _layoutLayoutModel.convert.layout(_layoutData['default'].initial.layout);}


  function dummyMeasurements() {
    return _layoutLayoutModel.convert.measurements(_layoutData['default'].initial.measurements);}





  // Jasmine:
  var jasmine = window.jasmine;var describe = window.describe;var beforeEach = window.beforeEach;var expect = window.expect;var it = window.it;var 
  any = jasmine.any;

  describe('A selection store', function () {

    var dispatcher;
    var layoutStoreMock;
    var graphStoreMock;
    var store;

    beforeEach(function () {
      dispatcher = new _DispatcherMock['default']();
      layoutStoreMock = { 
        layout: dummyLayout(), 
        measurements: dummyMeasurements() };

      graphStoreMock = { 
        graph: dummyGraph() };

      store = new _SelectionStore['default'](dispatcher, layoutStoreMock, graphStoreMock);});


    it('handles selection state actions', function () {
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.CopySelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.CutSelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.ClearSelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.PasteClipboard, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.DeleteSelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.ResizeSelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.MoveSelection, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.DeselectVertex, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.SelectVertex, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.DeselectEdge, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_selectionActions.SelectEdge, any(Function));});


    it('sets up an empty selection upon creation', function () {
      var actual = store.selection.toJS();
      expect((0, _diff['default'])((0, _selectionModel.Selection)().toJS(), actual)).toEqual({});});


    describe('asked to select a vertex', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _selectionActions.SelectVertex)({ vertex: (0, _graphGraphModel.Vertex)({ id: 'vA' }) }));});


      it('adds the vertex id to the selection', function () {
        var actual = store.selection.vertices.toJS();
        expect((0, _diff['default'])(_immutable.Set.of('vA').toJS(), actual)).toEqual({});});


      describe('and to de-select it again', function () {
        beforeEach(function () {
          dispatcher.handleAction(
          (0, _selectionActions.DeselectVertex)({ vertex: (0, _graphGraphModel.Vertex)({ id: 'vA' }) }));});



        it('removes the vertex id from the selection', function () {
          var actual = store.selection.toJS();
          expect((0, _diff['default'])((0, _selectionModel.Selection)().toJS(), actual)).toEqual({});});});



      describe('and then to clear the selection', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.ClearSelection)());});


        it('removes the vertex id from the selection', function () {
          var actual = store.selection.vertices.toJS();
          expect((0, _diff['default'])((0, _immutable.Set)().toJS(), actual)).toEqual({});});});});




    describe('asked to select an edge', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _selectionActions.SelectEdge)({ edge: (0, _graphGraphModel.Edge)({ id: 'r0' }) }));});


      it('adds the edge id to the selection', function () {
        var expected = _immutable.Set.of('r0').toJS();
        var actual = store.selection.edges.toJS();
        expect((0, _diff['default'])(expected, actual)).toEqual({});});


      describe('and to de-select it again', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.DeselectEdge)({ edge: (0, _graphGraphModel.Edge)({ id: 'r0' }) }));});


        it('removes the edge id from the selection', function () {
          var actual = store.selection.edges.toJS();
          expect((0, _diff['default'])((0, _selectionModel.Selection)().edges.toJS(), actual)).toEqual({});});});



      describe('and then to clear the selection', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.ClearSelection)());});


        it('removes the edge id from the selection', function () {
          var actual = store.selection.edges.toJS();
          expect((0, _diff['default'])((0, _immutable.Set)().toJS(), actual)).toEqual({});});});});




    describe('asked to size the (not yet existing) selection rectangle', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _selectionActions.ResizeSelection)({ 
          coords: (0, _layoutLayoutModel.Coords)({ left: 55, top: 40 }), 
          dimensions: (0, _layoutLayoutModel.Dimensions)({ width: 750, height: 140 }) }));});



      it('sets up an initial rectangle', function () {
        var expected = { 
          coords: (0, _layoutLayoutModel.Coords)({ left: 55, top: 40 }).toJS(), 
          dimensions: (0, _layoutLayoutModel.Dimensions)({ width: 750, height: 140 }).toJS() };

        var actual = store.selection.toJS();
        expect((0, _diff['default'])(expected.coords, actual.coords)).toEqual({});
        expect((0, _diff['default'])(expected.dimensions, actual.dimensions)).toEqual({});});


      it('adds intersecting vertices to the selection', function () {
        var actual = store.selection.vertices.toJS();
        expect((0, _diff['default'])(_immutable.Set.of('vA', 'vC').toJS(), actual)).toEqual({});});


      it('adds intersecting edges to the selection', function () {
        var actual = store.selection.edges.toJS();
        expect((0, _diff['default'])(_immutable.Set.of('r0').toJS(), actual)).toEqual({});});


      describe('then asked to grow it', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.ResizeSelection)({ 
            coords: (0, _layoutLayoutModel.Coords)({ left: 50, top: 40 }), 
            dimensions: (0, _layoutLayoutModel.Dimensions)({ width: 800, height: 600 }) }));});



        it('adds intersecting vertices to the selection', function () {
          var actual = store.selection.vertices.toJS();
          var expected = _immutable.Set.of('vA', 'vB', 'vC', 'vD').toJS();
          expect((0, _diff['default'])(expected, actual)).toEqual({});});


        it('adds intersecting edges to the selection', function () {
          var actual = store.selection.edges.toJS();
          expect((0, _diff['default'])(_immutable.Set.of('r0', 'f0').toJS(), actual)).toEqual({});});});



      describe('then asked to shrink it', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.ResizeSelection)({ 
            coords: (0, _layoutLayoutModel.Coords)({ left: 50, top: 40 }), 
            dimensions: (0, _layoutLayoutModel.Dimensions)({ width: 400, height: 120 }) }));});



        it('removes non-intersecting vertices to the selection', function () {
          var actual = store.selection.vertices.toJS();
          expect((0, _diff['default'])(_immutable.Set.of('vA').toJS(), actual)).toEqual({});});


        it('removes non-intersecting edges to the selection', function () {
          var actual = store.selection.edges.toJS();
          expect((0, _diff['default'])(_immutable.Set.of().toJS(), actual)).toEqual({});});});




      describe('then asked to delete it', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _selectionActions.DeleteSelection)());});


        it('dispatches actions to remove the selected vertices', function () {
          expect(dispatcher.dispatch).toHaveBeenCalledWith((0, _graphGraphActions.RemoveVertex)({ 
            vertexId: 'vA' }));

          expect(dispatcher.dispatch).toHaveBeenCalledWith((0, _graphGraphActions.RemoveVertex)({ 
            vertexId: 'vC' }));});



        it('dispatches actions to remove the selected edges', function () {
          expect(dispatcher.dispatch).toHaveBeenCalledWith((0, _graphGraphActions.RemoveEdge)({ 
            edgeId: 'r0' }));});});




      describe('when selected nodes are deleted', function () {
        beforeEach(function () {
          dispatcher.handleAction((0, _graphGraphActions.RemoveVertex)({ 
            vertexId: 'vA' }));

          dispatcher.handleAction((0, _graphGraphActions.RemoveEdge)({ 
            edgeId: 'r0' }));});




        it('modifies the selection vertices accordingly', function () {
          var actual = store.selection.vertices.toJS();
          expect((0, _diff['default'])(_immutable.Set.of('vC').toJS(), actual)).toEqual({});});


        it('modifies the selection edges accordingly', function () {
          var actual = store.selection.edges.toJS();
          expect((0, _diff['default'])(_immutable.Set.of().toJS(), actual)).toEqual({});});});});});});
//# sourceMappingURL=data:application/json;base64,