define(['exports', '../graph-store', '../../../testing/dispatcher-mock', '../../../testing/diff', './data', 'immutable', '../../history/history-actions', '../graph-actions', '../graph-model'], function (exports, _graphStore, _testingDispatcherMock, _testingDiff, _data, _immutable, _historyHistoryActions, _graphActions, _graphModel) {'use strict';function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _GraphStore = _interopRequireDefault(_graphStore);var _DispatcherMock = _interopRequireDefault(_testingDispatcherMock);var _diff = _interopRequireDefault(_testingDiff);var _data2 = _interopRequireDefault(_data);












  function dummyGraph() {
    return _graphModel.convert.graph(_data2['default'].initial.graph);}


  function dummyTypes() {
    return _graphModel.convert.types(_data2['default'].initial.types);}



  // Jasmine:
  var jasmine = window.jasmine;var describe = window.describe;var beforeEach = window.beforeEach;var expect = window.expect;var it = window.it;var 
  any = jasmine.any;

  describe('A graph store', function () {

    var dispatcher;
    var store;

    beforeEach(function () {
      dispatcher = new _DispatcherMock['default']();
      store = new _GraphStore['default'](dispatcher, dummyGraph(), dummyTypes());});


    it('handles graph state actions', function () {
      expect(dispatcher.register).
      toHaveBeenCalledWith(_graphActions.ConnectPort, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_graphActions.DisconnectPort, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_graphActions.RemoveEdge, any(Function));
      expect(dispatcher.register).
      toHaveBeenCalledWith(_graphActions.RemoveVertex, any(Function));});


    it('stores its initial state to history', function () {
      expect(dispatcher.dispatch).
      toHaveBeenCalledWith((0, _historyHistoryActions.SaveState)({ 
        storeId: 'GraphStore', 
        state: _immutable.List.of(dummyGraph(), dummyTypes()) }));});



    describe('asked to remove a vertex', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphActions.RemoveVertex)({ vertexId: 'vA' }));});


      it('removes it from the graph state', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        delete expected.vertices.vA;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to remove a vertex owning simple edges', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphActions.RemoveVertex)({ vertexId: 'vC' }));});


      it('removes it from the graph state along with edges owned by the vertex', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        delete expected.vertices.vC;
        expected.vertices.vA.ports.outbound[1].edgeId = null;
        expected.vertices.vB.ports.outbound[1].edgeId = null;
        delete expected.edges.a0;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to disconnect a slave port from a complex edge with 3 members', function () {
      beforeEach(function () {
        var vertex = store.graph.vertices.get('vC');
        var port = vertex.ports.inbound.get(0);
        dispatcher.handleAction((0, _graphActions.DisconnectPort)({ 
          vertex: vertex, 
          port: port }));});



      it('removes it from the graph state', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        expected.vertices.vC.ports.inbound[0].edgeId = null;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to disconnect a master port from a complex edge with 3 members', function () {
      beforeEach(function () {
        var vertex = store.graph.vertices.get('vB');
        var port = vertex.ports.outbound.get(0);
        dispatcher.handleAction((0, _graphActions.DisconnectPort)({ 
          vertex: vertex, 
          port: port }));});



      it('removes it from the graph state', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        expected.vertices.vB.ports.outbound[0].edgeId = null;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to disconnect the owning port from a simple edge', function () {
      var expected;
      beforeEach(function () {
        var vertex = store.graph.vertices.get('vC');
        var port = vertex.ports.inbound.get(3);
        dispatcher.handleAction((0, _graphActions.DisconnectPort)({ 
          vertex: vertex, 
          port: port }));

        expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();});


      it('removes the entire edge from the graph state', function () {
        var actual = store.graph.toJS();
        delete expected.edges.a0;
        expected.vertices.vC.ports.inbound[3].edgeId = null;
        expected.vertices.vA.ports.outbound[1].edgeId = null;
        expected.vertices.vB.ports.outbound[1].edgeId = null;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to disconnect a non-owning port from a simple edge with 3 members', function () {
      var expected;
      beforeEach(function () {
        var vertex = store.graph.vertices.get('vB');
        var port = vertex.ports.outbound.get(1);
        dispatcher.handleAction((0, _graphActions.DisconnectPort)({ 
          vertex: vertex, 
          port: port }));

        expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        expected.vertices.vB.ports.outbound[1].edgeId = null;});


      it('just disconnects the port', function () {
        var actual = store.graph.toJS();
        expect((0, _diff['default'])(expected, actual)).toEqual({});});


      describe('then asked to disconnect the remaining non-owning port', function () {
        beforeEach(function () {
          var vertex = store.graph.vertices.get('vA');
          var port = vertex.ports.outbound.get(1);
          dispatcher.handleAction((0, _graphActions.DisconnectPort)({ 
            vertex: vertex, 
            port: port }));

          expected.vertices.vA.ports.outbound[1].edgeId = null;});


        it('removes the entire edge from the graph state', function () {
          var actual = store.graph.toJS();
          delete expected.edges.a0;
          expected.vertices.vC.ports.inbound[3].edgeId = null;
          expect((0, _diff['default'])(expected, actual)).toEqual({});});});});




    describe('asked to remove a simple edge', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphActions.RemoveEdge)({ edgeId: 'a0' }));});


      it('removes that edge', function () {
        var actual = store.graph.toJS();
        expect(actual.edges.a0).not.toBeDefined();});


      it('disconnects all ports connected to it', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        delete expected.edges.a0;
        expected.vertices.vA.ports.outbound[1].edgeId = null;
        expected.vertices.vB.ports.outbound[1].edgeId = null;
        expected.vertices.vC.ports.inbound[3].edgeId = null;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('asked to remove a complex edge', function () {
      beforeEach(function () {
        dispatcher.handleAction((0, _graphActions.RemoveEdge)({ edgeId: 'r0' }));});


      it('removes that edge', function () {
        var actual = store.graph.toJS();
        expect(actual.edges.r0).not.toBeDefined();});


      it('disconnects all ports connected to it', function () {
        var actual = store.graph.toJS();
        var expected = _graphModel.convert.graph(_data2['default'].initial.graph).toJS();
        delete expected.edges.r0;
        expected.vertices.vB.ports.outbound[0].edgeId = null;
        expected.vertices.vC.ports.inbound[0].edgeId = null;
        expected.vertices.vD.ports.inbound[0].edgeId = null;
        expect((0, _diff['default'])(expected, actual)).toEqual({});});});



    describe('called to generate rename rules', function () {
      var rules;
      beforeEach(function () {
        var pseudoSelection = _graphModel.convert.graph({ 
          vertices: { vA: _data2['default'].initial.graph.vertices.vA }, 
          edges: { a0: _data2['default'].initial.graph.edges.a0 } });

        rules = store.renameRules(pseudoSelection);});


      it('provides a map to an isomorphic graph, disjoint to its own', function () {
        expect(rules.toJS()).toEqual({ 
          vertices: { 'vA': 'vA 1' }, 
          edges: { 'a0': 'a0 1' } });});});




    describe('called to apply rename rules', function () {
      var result;
      beforeEach(function () {
        var pseudoSelection = _graphModel.convert.graph({ 
          vertices: { 
            vA: _data2['default'].initial.graph.vertices.vA, 
            vB: _data2['default'].initial.graph.vertices.vB }, 

          edges: { a0: _data2['default'].initial.graph.edges.a0 } });

        var rules = (0, _immutable.Map)({ 
          vertices: (0, _immutable.Map)({ 'vA': 'vA 1' }), 
          edges: (0, _immutable.Map)({ 'a0': 'a0 1' }) });

        result = store.applyRenameRules(pseudoSelection, rules);});


      it('generates an isomorphic graph based on these rules', function () {
        var expected = _graphModel.convert.graph({ 
          vertices: { 
            'vA 1': _data2['default'].initial.graph.vertices.vA, 
            vB: _data2['default'].initial.graph.vertices.vB }, 

          edges: { 'a0 1': _data2['default'].initial.graph.edges.a0 } }).
        toJS();
        expected.edges['a0 1'].id = 'a0 1';
        expected.vertices['vA 1'].id = 'vA 1';
        expected.vertices['vA 1'].ports.outbound[1].edgeId = 'a0 1';
        expected.vertices['vB'].ports.outbound[1].edgeId = 'a0 1';
        expect((0, _diff['default'])(expected, result.toJS())).toEqual({});});});



    describe('called to insert a disjoint graph', function () {
      beforeEach(function () {
        var pseudoSelection = _graphModel.convert.graph({ 
          vertices: { vA: _data2['default'].initial.graph.vertices.vA }, 
          edges: { a0: _data2['default'].initial.graph.edges.a0 } });

        var rules = (0, _immutable.Map)({ 
          vertices: (0, _immutable.Map)({ 'vA': 'vA 1' }), 
          edges: (0, _immutable.Map)({ 'a0': 'a0 1' }) });

        var subGraph = store.applyRenameRules(pseudoSelection, rules);
        store.insert(subGraph);});


      it('extends its own graph with the supplied graph', function () {
        var vA1 = copy(_data2['default'].initial.graph.vertices.vA);
        vA1.id = 'vA 1';
        vA1.ports.outbound[1].edgeId = 'a0 1';
        var a01 = copy(_data2['default'].initial.graph.edges.a0);
        a01.id = 'a0 1';
        var expected = copy(_data2['default'].initial.graph);
        expected.edges['a0 1'] = a01;
        expected.vertices['vA 1'] = vA1;
        expect((0, _diff['default'])(expected, store.graph.toJS())).toEqual({});});});



    describe('called to insert an overlapping graph with rename rules', function () {
      beforeEach(function () {
        var pseudoSelection = _graphModel.convert.graph({ 
          vertices: { vA: _data2['default'].initial.graph.vertices.vA }, 
          edges: { a0: _data2['default'].initial.graph.edges.a0 } });

        var rules = (0, _immutable.Map)({ 
          vertices: (0, _immutable.Map)({ 'vA': 'vA 1' }), 
          edges: (0, _immutable.Map)({ 'a0': 'a0 1' }) });

        store.insert(pseudoSelection, rules);});


      it('extends its own graph with the renamed supplied graph', function () {
        var vA1 = copy(_data2['default'].initial.graph.vertices.vA);
        vA1.id = 'vA 1';
        vA1.ports.outbound[1].edgeId = 'a0 1';
        var a01 = copy(_data2['default'].initial.graph.edges.a0);
        a01.id = 'a0 1';
        var expected = copy(_data2['default'].initial.graph);
        expected.edges['a0 1'] = a01;
        expected.vertices['vA 1'] = vA1;
        expect((0, _diff['default'])(expected, store.graph.toJS())).toEqual({});});});});





  function copy(o) {
    return JSON.parse(JSON.stringify(o));}});
//# sourceMappingURL=data:application/json;base64,