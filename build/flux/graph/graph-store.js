define(['exports', 'module', 'immutable', '../history/history-actions', '../layout/layout-actions', './graph-model', './graph-actions'], function (exports, module, _immutable, _historyHistoryActions, _layoutLayoutActions, _graphModel, _graphActions) {'use strict';var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}













  /**
   * Manages the graph model prop.
   */var 
  GraphStore = (function () {

    function GraphStore(dispatcher, graph, types) {var _this = this;_classCallCheck(this, GraphStore);
      this.dispatcher = dispatcher;

      this.storeId = this.constructor.name;
      this.graph = graph;
      this.types = types;
      this.save();

      dispatcher.register(_graphActions.DisconnectPort, function (act) {
        _this.disconnect(act.vertex, act.port);
        _this.save();});


      dispatcher.register(_graphActions.ConnectPort, function (act) {
        _this.connect(act.from, act.to);
        _this.save();});


      dispatcher.register(_graphActions.RemoveVertex, function (act) {
        _this.removeVertex(act.vertexId);
        _this.save();});


      dispatcher.register(_graphActions.RemoveEdge, function (act) {
        _this.removeEdge(act.edgeId);
        _this.save();});


      dispatcher.register(_historyHistoryActions.RestoreState, function (act) {
        if (act.storeId === _this.storeId) {
          _this.graph = act.state.get(0);
          _this.types = act.state.get(1);}});}_createClass(GraphStore, [{ key: 'save', value: 





      function save() {
        this.dispatcher.dispatch((0, _historyHistoryActions.SaveState)({ 
          storeId: this.storeId, 
          state: _immutable.List.of(this.graph, this.types) }));} }, { key: 'connect', value: 



      function connect(from, to) {
        if (to.edgeId) {
          this.setPortEdge(from, to.edgeId);
          return;}


        var newEdgeId = nextId(this.graph.edges);
        var newEdge = (0, _graphModel.Edge)({ id: newEdgeId, label: 'aaaa', type: from.type });
        this.graph = this.graph.setIn(['edges', newEdgeId], newEdge);
        this.setPortEdge(from, newEdgeId);
        this.setPortEdge(to, newEdgeId);
        this.pruneEmptyEdges();

        this.dispatcher.dispatch((0, _layoutLayoutActions.HandleEdgeInserted)({ 
          edge: newEdge, 
          from: from, 
          to: to }));


        function nextId(someMap) {
          var prefix = '#' + someMap.size;
          var qualified = function qualified(c) {return c ? prefix : prefix + '/' + c;};
          var counter = 0;
          while (someMap.has(qualified(counter))) {++counter;}
          return qualified(counter);}} }, { key: 'setPortEdge', value: 



      function setPortEdge(from, edgeId) {
        var portsPath = ['vertices', from.vertexId, 'ports', from.direction];
        this.graph = this.graph.updateIn(portsPath, function (ports) {return ports.map(function (p) {return (
              p.id === from.portId ? p.set('edgeId', edgeId) : p);});});} }, { key: 'disconnect', value: 



      function disconnect(vertex, port) {
        var portsPath = ['vertices', vertex.id, 'ports', port.direction];

        var type = this.types.get(port.type);
        if (type.owningPort === port.direction) {
          this.removeEdge(port.edgeId);
          return;}


        var current = this.graph;
        this.graph = current.
        setIn(portsPath, current.getIn(portsPath).map(function (p) {
          return p.id !== port.id ? p : port.set('edgeId', null);}));

        this.pruneEmptyEdges();} }, { key: 'removeEdge', value: 


      function removeEdge(edgeId) {
        this.disconnectAll(edgeId);
        this.pruneEmptyEdges();} }, { key: 'removeVertex', value: 


      function removeVertex(vertexId) {var _this2 = this;
        var vertex = this.graph.vertices.get(vertexId);
        _graphModel.Directions.flatMap(function (d) {return vertex.ports[d];}).forEach(function (port) {
          _this2.disconnect(vertex, port);});


        this.graph = this.graph.update('vertices', function (vs) {return (
            vs.filter(function (v) {return v.id !== vertexId;}));});
        this.pruneEmptyEdges();} }, { key: 'disconnectAll', value: 


      function disconnectAll(edgeId) {
        this.graph = mapGraphPorts(this.graph, function (p) {return p.set('edgeId', 
          p.edgeId === edgeId ? null : p.edgeId);});} }, { key: 'pruneEmptyEdges', value: 



      function pruneEmptyEdges() {var _this3 = this;
        var portsByEdge = this.graph.vertices.valueSeq().
        flatMap(function (v) {return _graphModel.Directions.flatMap(function (d) {return v.ports[d];});}).
        filter(function (p) {return p.edgeId != null;}).
        groupBy(function (p) {return p.edgeId;});

        var isSimple = function isSimple(e) {return _this3.types.get(e.type).owningPort !== null;};

        var toPrune = this.graph.edges.filter(function (e) {
          var edgePorts = portsByEdge.get(e.id);
          return !edgePorts || edgePorts.size <= (isSimple(e) ? 1 : 0);});


        toPrune.forEach(function (e) {return _this3.disconnectAll(e.id);});

        this.graph = this.graph.set('edges', 
        this.graph.edges.filter(function (e) {return !toPrune.has(e.id);}));}




      // pure helpers
    }, { key: 'renameRules', value: 
      function renameRules(newGraph) {
        return (0, _immutable.Map)({ 
          edges: renameRules(this.graph.edges, newGraph.edges), 
          vertices: renameRules(this.graph.vertices, newGraph.vertices) });


        function renameRules(existingMap, newMap) {
          var jsExistingKeys = existingMap.toJS();
          var takenKeys = {};
          var rules = {};
          newMap.forEach(function (_, key) {
            var newKey = disjointKey(
            takenKeys, 
            disjointKey(jsExistingKeys, key));

            rules[key] = newKey;
            takenKeys[newKey] = true;});

          return (0, _immutable.Map)(rules);}


        function disjointKey(_x, _x2) {var _again = true;_function: while (_again) {var jsMap = _x, key = _x2;_again = false;
            var matcher = /^(.*) ([0-9]+)$/;
            if (!jsMap.hasOwnProperty(key)) {
              return key;}

            if (!matcher.test(key)) {_x = 
              jsMap;_x2 = key + ' 1';_again = true;matcher = undefined;continue _function;}

            var number = 1 + parseInt(key.replace(matcher, '$2'), 10);_x = 
            jsMap;_x2 = key.replace(matcher, '$1') + ' ' + number;_again = true;matcher = number = undefined;continue _function;}}} }, { key: 'applyRenameRules', value: 



      function applyRenameRules(newGraph, renameRules) {
        var edgeRules = renameRules.get('edges');
        var vertexRules = renameRules.get('vertices');
        var edges = {};
        newGraph.edges.forEach(function (edge, eId) {
          var newId = edgeRules.get(eId);
          edges[newId] = edge.setIn(['id'], newId);});

        var vertices = {};
        newGraph.vertices.forEach(function (vertex, vId) {
          var newId = vertexRules.get(vId) || vertex.id;
          vertices[newId] = vertex.setIn(['id'], newId);});

        return mapGraphPorts(
        (0, _graphModel.Graph)({ edges: (0, _immutable.Map)(edges), vertices: (0, _immutable.Map)(vertices) }), 
        function (p) {return p.set('edgeId', 
          p.edgeId && edgeRules.get(p.edgeId) || p.edgeId || null);});} }, { key: 'insert', value: 




      function insert(newGraph, renameRules) {
        var disjointGraph = renameRules ? 
        this.applyRenameRules(newGraph, renameRules) : 
        newGraph;

        this.graph = this.graph.
        set('edges', this.graph.edges.merge(disjointGraph.edges)).
        set('vertices', this.graph.vertices.merge(disjointGraph.vertices));} }]);return GraphStore;})();module.exports = 



  GraphStore;


  function mapVertexPorts(v, f) {
    return v.set('ports', (0, _graphModel.Ports)({ 
      inbound: v.ports.inbound.map(f), 
      outbound: v.ports.outbound.map(f) }));}



  function mapVertices(graph, f) {
    return graph.setIn(['vertices'], graph.vertices.map(f));}


  function mapGraphPorts(graph, f) {
    return mapVertices(graph, function (v) {return mapVertexPorts(v, f);});}});
//# sourceMappingURL=data:application/json;base64,